// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/martini-contrib/render (interfaces: Render)

package main

import (
	gomock "github.com/golang/mock/gomock"
	render "github.com/martini-contrib/render"
	template "html/template"
	http "net/http"
)

// Mock of Render interface
type MockRender struct {
	ctrl     *gomock.Controller
	recorder *_MockRenderRecorder
}

// Recorder for MockRender (not exported)
type _MockRenderRecorder struct {
	mock *MockRender
}

func NewMockRender(ctrl *gomock.Controller) *MockRender {
	mock := &MockRender{ctrl: ctrl}
	mock.recorder = &_MockRenderRecorder{mock}
	return mock
}

func (_m *MockRender) EXPECT() *_MockRenderRecorder {
	return _m.recorder
}

func (_m *MockRender) Data(_param0 int, _param1 []byte) {
	_m.ctrl.Call(_m, "Data", _param0, _param1)
}

func (_mr *_MockRenderRecorder) Data(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Data", arg0, arg1)
}

func (_m *MockRender) Error(_param0 int) {
	_m.ctrl.Call(_m, "Error", _param0)
}

func (_mr *_MockRenderRecorder) Error(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Error", arg0)
}

func (_m *MockRender) HTML(_param0 int, _param1 string, _param2 interface{}, _param3 ...render.HTMLOptions) {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "HTML", _s...)
}

func (_mr *_MockRenderRecorder) HTML(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HTML", _s...)
}

func (_m *MockRender) Header() http.Header {
	ret := _m.ctrl.Call(_m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

func (_mr *_MockRenderRecorder) Header() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Header")
}

func (_m *MockRender) JSON(_param0 int, _param1 interface{}) {
	_m.ctrl.Call(_m, "JSON", _param0, _param1)
}

func (_mr *_MockRenderRecorder) JSON(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "JSON", arg0, arg1)
}

func (_m *MockRender) Redirect(_param0 string, _param1 ...int) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Redirect", _s...)
}

func (_mr *_MockRenderRecorder) Redirect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Redirect", _s...)
}

func (_m *MockRender) Status(_param0 int) {
	_m.ctrl.Call(_m, "Status", _param0)
}

func (_mr *_MockRenderRecorder) Status(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status", arg0)
}

func (_m *MockRender) Template() *template.Template {
	ret := _m.ctrl.Call(_m, "Template")
	ret0, _ := ret[0].(*template.Template)
	return ret0
}

func (_mr *_MockRenderRecorder) Template() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Template")
}

func (_m *MockRender) Text(_param0 int, _param1 string) {
	_m.ctrl.Call(_m, "Text", _param0, _param1)
}

func (_mr *_MockRenderRecorder) Text(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Text", arg0, arg1)
}

func (_m *MockRender) XML(_param0 int, _param1 interface{}) {
	_m.ctrl.Call(_m, "XML", _param0, _param1)
}

func (_mr *_MockRenderRecorder) XML(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "XML", arg0, arg1)
}
