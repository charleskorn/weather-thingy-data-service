// Automatically generated by MockGen. DO NOT EDIT!
// Source: database.go

package main

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseRecorder
}

// Recorder for MockDatabase (not exported)
type _MockDatabaseRecorder struct {
	mock *MockDatabase
}

func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &_MockDatabaseRecorder{mock}
	return mock
}

func (_m *MockDatabase) EXPECT() *_MockDatabaseRecorder {
	return _m.recorder
}

func (_m *MockDatabase) RunMigrations() (int, error) {
	ret := _m.ctrl.Call(_m, "RunMigrations")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) RunMigrations() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RunMigrations")
}

func (_m *MockDatabase) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockDatabaseRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockDatabase) BeginTransaction() error {
	ret := _m.ctrl.Call(_m, "BeginTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) BeginTransaction() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BeginTransaction")
}

func (_m *MockDatabase) CommitTransaction() error {
	ret := _m.ctrl.Call(_m, "CommitTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) CommitTransaction() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CommitTransaction")
}

func (_m *MockDatabase) RollbackTransaction() error {
	ret := _m.ctrl.Call(_m, "RollbackTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) RollbackTransaction() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RollbackTransaction")
}

func (_m *MockDatabase) RollbackUncommittedTransaction() error {
	ret := _m.ctrl.Call(_m, "RollbackUncommittedTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) RollbackUncommittedTransaction() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RollbackUncommittedTransaction")
}

func (_m *MockDatabase) DB() *sql.DB {
	ret := _m.ctrl.Call(_m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

func (_mr *_MockDatabaseRecorder) DB() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DB")
}

func (_m *MockDatabase) Transaction() *sql.Tx {
	ret := _m.ctrl.Call(_m, "Transaction")
	ret0, _ := ret[0].(*sql.Tx)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Transaction() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Transaction")
}

func (_m *MockDatabase) CreateAgent(agent *Agent) error {
	ret := _m.ctrl.Call(_m, "CreateAgent", agent)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) CreateAgent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAgent", arg0)
}

func (_m *MockDatabase) GetAllAgents() ([]Agent, error) {
	ret := _m.ctrl.Call(_m, "GetAllAgents")
	ret0, _ := ret[0].([]Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetAllAgents() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllAgents")
}

func (_m *MockDatabase) CreateVariable(variable *Variable) error {
	ret := _m.ctrl.Call(_m, "CreateVariable", variable)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) CreateVariable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVariable", arg0)
}

func (_m *MockDatabase) AddDataPoint(dataPoint DataPoint) error {
	ret := _m.ctrl.Call(_m, "AddDataPoint", dataPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) AddDataPoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddDataPoint", arg0)
}

func (_m *MockDatabase) CheckAgentIDExists(agentID int) (bool, error) {
	ret := _m.ctrl.Call(_m, "CheckAgentIDExists", agentID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) CheckAgentIDExists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAgentIDExists", arg0)
}

func (_m *MockDatabase) GetVariableIDForName(name string) (int, error) {
	ret := _m.ctrl.Call(_m, "GetVariableIDForName", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetVariableIDForName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVariableIDForName", arg0)
}

func (_m *MockDatabase) GetData(agentID int, variableID int, fromDate time.Time, toDate time.Time) (map[string]float64, error) {
	ret := _m.ctrl.Call(_m, "GetData", agentID, variableID, fromDate, toDate)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetData", arg0, arg1, arg2, arg3)
}

func (_m *MockDatabase) GetVariableByID(variableID int) (Variable, error) {
	ret := _m.ctrl.Call(_m, "GetVariableByID", variableID)
	ret0, _ := ret[0].(Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetVariableByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVariableByID", arg0)
}

func (_m *MockDatabase) GetVariablesForAgent(agentID int) ([]Variable, error) {
	ret := _m.ctrl.Call(_m, "GetVariablesForAgent", agentID)
	ret0, _ := ret[0].([]Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetVariablesForAgent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVariablesForAgent", arg0)
}

func (_m *MockDatabase) GetAgentByID(agentID int) (Agent, error) {
	ret := _m.ctrl.Call(_m, "GetAgentByID", agentID)
	ret0, _ := ret[0].(Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetAgentByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAgentByID", arg0)
}

func (_m *MockDatabase) CreateUser(user *User) error {
	ret := _m.ctrl.Call(_m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateUser", arg0)
}
